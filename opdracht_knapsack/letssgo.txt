import random


class Item:
    def __init__(self, values):
        self.name = values[0]
        self.points = int(values[1])
        self.weight = int(values[2])
        self.volume = int(values[3])

    def get_points(self):
        return int(self.points)

    def get_weight(self):
        return int(self.weight)

    def get_volume(self):
        return int(self.volume)


class Knapsack(Item):
    items = []
    points = 0
    weight = 0
    volume = 0
    max_weight = 0
    max_volume = 0

    def __init__(self, max_weight, max_volume):
        self.max_weight = max_weight
        self.max_volume = max_volume

    def add(self, item):
        if self.weight + item.get_weight() > self.max_weight:
            return False
        if self.volume + item.get_volume() > self.max_volume:
            return False
        self.points += item.points
        self.weight += item.weight
        self.volume += item.volume
        self.items.append(item)
        return True

    def pop(self, n):
        item = self.items.pop(n)
        self.points -= item.get_points()
        self.weight -= item.get_weight()
        self.volume -= item.get_weight()

    def save(self, solution_file):
        file = open(solution_file, "w")
        file.write("points:"+str(self.points)+"\n")
        for item in self.items:
            file.write(item.name+"\n")
        file.close

    def stats(self):
        return self.points, self.weight, self.volume, self.items

    def fill(self, points, weight, volume, items):
        self.points = points
        self.weight = weight
        self.volume = volume
        self.items = items[:]

    def copy_empty(self):
        return Knapsack(self.max_weight, self.max_volume)

    def copy(self):
        copy = self.copy_empty()
        copy.fill(*self.stats())
        return copy


class Solver:
    knapsack = None

    def get_best_knapsack(self):
        return self.knapsack


class Solver_Random(Solver):
    index_list = []

    def __init__(self, iterations):
        self.iterations = iterations

    def solve(self, knapsack: Knapsack, items: list[Item]) -> Knapsack:
        for _ in range(self.iterations):
            test_knapsack = knapsack.copy_empty()
            test_knapsack.items = []
            index = list(range(len(items)))
            random.shuffle(index)
            while(test_knapsack.add(items[index.pop(0)])):
                pass
            if test_knapsack.get_points() > knapsack.get_points():
                knapsack = test_knapsack.copy()
        self.knapsack = knapsack


class Solver_Random_Improved(Solver_Random):
    def solve(self, knapsack: Knapsack, items: list[Item]) -> Knapsack:
        super().solve(knapsack, items)
        choices = [x for x in items if x not in knapsack.items]
        for _ in range(self.iterations):
            test_knapsack = self.knapsack.copy()
            n = random.randint(0, len(test_knapsack.items) - 1)
            test_knapsack.pop(n)
            for i in range(len(choices)):
                if test_knapsack.add(choices[i]):
                    break
            if test_knapsack.get_points() > self.knapsack.points:
                self.knapsack = test_knapsack.copy()


class Solver_Optimal_Recursive(Solver):
    def solve(self, knapsack, items):
        index = list(range(len(items)))
        best_knapsack = knapsack.copy_empty()

        def dfs(knapsack, items, index):
            nonlocal best_knapsack
            if not index:
                return
            i = items[index.pop()]
            dfs(knapsack.copy(), items, index[:])
            if knapsack.add(i):
                if knapsack.get_points() > best_knapsack.get_points():
                    best_knapsack = knapsack.copy()
                dfs(knapsack.copy(), items, index[:])
                knapsack.pop(-1)
        dfs(knapsack, items, index)
        self.get_best_knapsack = best_knapsack


class Solver_Optimal_Iterative(Solver):
    def solve(self, knapsack, items):
        best_knapsack = knapsack.copy_empty()
        stack = [(list(range(len(items))), knapsack.copy())]

        while stack:
            index, current_knapsack = stack.pop()

            if not index:
                continue

            i = index.pop()
            stack.append((index[:], current_knapsack.copy()))

            if current_knapsack.add(items[i]):
                if current_knapsack.get_points() > best_knapsack.get_points():
                    best_knapsack = current_knapsack.copy()
                stack.append((index[:], current_knapsack.copy()))

        self.knapsack = best_knapsack


class Solver_Optimal_Iterative_Deepcopy(Solver_Optimal_Iterative):
    pass


def load_knapsack(knapsack_file):
    with open(knapsack_file) as file:
        data = []
        next(file)  # skip header line
        for line in file:
            values = Item(line.replace('\n', '').split(', '))
            data.append(values)
        item = data.pop(0)
        knapsack = Knapsack(item.get_weight(), item.get_volume())
    return knapsack, data


def solve(solver, knapsack_file, solution_file):
    knapsack, items = load_knapsack(knapsack_file)
    solver.solve(knapsack, items)
    knapsack = solver.get_best_knapsack()
    knapsack.save(solution_file)


def main():
    solver_random = Solver_Random(1000)
    solver_optimal_recursive = Solver_Optimal_Recursive()
    solver_optimal_iterative_deepcopy = Solver_Optimal_Iterative_Deepcopy()
    solver_optimal_iterative = Solver_Optimal_Iterative()
    solver_random_improved = Solver_Random_Improved(5000)

    knapsack_file = "knapsack_small"
    print("=== solving:", knapsack_file)
    solve(solver_random,                     knapsack_file+".csv", knapsack_file+"_solution_random.csv")
    solve(solver_optimal_recursive,          knapsack_file+".csv", knapsack_file+"_solution_optimal_recursive.csv")
    solve(solver_optimal_iterative_deepcopy, knapsack_file+".csv", knapsack_file+"_solution_optimal_iterative_deepcopy.csv")
    solve(solver_optimal_iterative,          knapsack_file+".csv", knapsack_file+"_solution_optimal_iterative.csv")
    solve(solver_random_improved,            knapsack_file+".csv", knapsack_file+"_solution_random_improved.csv")

    knapsack_file = "knapsack_medium"
    print("=== solving:", knapsack_file)
    solve(solver_random,                     knapsack_file+".csv", knapsack_file+"_solution_random.csv")
    solve(solver_optimal_recursive,          knapsack_file+".csv", knapsack_file+"_solution_optimal_recursive.csv")
    solve(solver_optimal_iterative_deepcopy, knapsack_file+".csv", knapsack_file+"_solution_optimal_iterative_deepcopy.csv")
    solve(solver_optimal_iterative,          knapsack_file+".csv", knapsack_file+"_solution_optimal_iterative.csv")
    solve(solver_random_improved,            knapsack_file+".csv", knapsack_file+"_solution_random_improved.csv")

    knapsack_file = "knapsack_large"
    print("=== solving:", knapsack_file)
    solve(solver_random,                     knapsack_file+".csv", knapsack_file+"_solution_random.csv")
    solve(solver_random_improved,            knapsack_file+".csv", knapsack_file+"_solution_random_improved.csv")


if __name__ == "__main__":
    main()
